

What is Hibernate ?
 (This is something like shortcut to use jdbc connectivity )
Hibernate is an ORM Framework but now the question is what is ORM (Object Relational Mapping )
why do we need it ?
As you java is an object oriented language and we deal every aspect of java on the basis of object and we need to store the
data also in the db and to contact with we guys need SQL and in SQL we write queries and to work professionaly we
guys need to know the sql queries write them and need to do lot more stuff to deal with this and to
shorten this headache hibernate comes into the picture which says just give the object and add that in db

How does Hibernate works ?
hibernate takes the object and understands it and how it understands it .
on the basis of the class and class is a blueprint

let say we have an object of a class

class student {
int id ;
string name ;
string address ;
}

with this object what we get to know about this is that we have 3 columns and the different type
of data types and on the basis of that types we can create the columns of the table and according to
other object we can add the entries in the table

This is how the hibernate works and understand the object for the mapping

After this we created a new project in java using Maven for the build settings and the build dependencies
and we are going to use the postgresql  as db and we have to install the dependcies and now we will
add those inside the class
pom.xml



Now lets create the other class for the objects and we have created a student class


class student {
int id ;
string name ;
string address ;
}

now this is the object and as we discussed earlier that hibernate saves the objects directly withour making an effort so
will this work for save() like this ===== no
because what it says that you are tying to connect two things want me to do the changes over there for that you need
to setup a Session and openSession do this

Session session = null;

and for session we need sessionFactory and both these are interfaces
SessionFactory sf = null;
we provide the object to the session and will use openSession function over there sf.openSession();
but what are these this is main question ??????????

   Configuration configuration = new Configuration();

        SessionFactory sessionFactory = configuration.buildSessionFactory() ;
        Session session = sessionFactory.openSession();

        session.save(student);

        we build it like this but will it work ?

No this will not work why because we are making a configuration but we don't know to whom we are making it we have not mentioned the db name
password and if we didn't do this then how can we expect from this to save the data in the db
here now configure comes to picture and we will do this in the next lecture

now the above mentioned question about the session and sessionFactory  ...............

Here it is what it is .........

In Hibernate, SessionFactory is a long-lived object that manages database connections and other resources, while Session is a short-lived object that interacts with the database for a specific transaction.
SessionFactory:
It's a factory class for creating Session objects.
It holds a second-level cache, which can be shared across multiple sessions.
It manages database connections and other resources.
It is typically created once per application and reused throughout its lifecycle.
Session:
It's a short-lived object that represents a connection with the database for a specific transaction.
It acts as an interface between the application and the database.
It provides methods for saving, updating, deleting, and retrieving objects.
Each session has its own first-level cache, which is cleared when the session is closed.



After all this configure comes to the picture and configure is the function which will configure the db for us
but if we call the configure function then we guys need to xml file for this because this will go to find the xml file ad this will not find it and then we will get the
error for that so lets configure the xml for us


now lets add the configuration in the xml file in the cinfigure we need to add the password username and the db name then
after this run this but what we get is the error but why ???????????/


Exception in thread "main" org.hibernate.UnknownEntityTypeException: Unable to locate persister: com.nishant.Student
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.getEntityDescriptor(MappingMetamodelImpl.java:395)
	at org.hibernate.internal.SessionImpl.getEntityPersister(SessionImpl.java:1501)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:108)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:183)
	at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:33)
	at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:82)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:663)



to resolve this issue we need to provide the class while configuring the session
  configuration.addAnnotatedClass(com.nishant.Student.class);

  we add this but we still get the error but why because to use the class we need to use annotations in the class in teh student class

  import jakarta.persistence.Entity; //import the annotations from jakarta


  @Entity // this is the annotations
  but why we import from this from the jakarta this is because
  there are lots of orm present in the market and they behave differently to work and here the problem arises
  can we have the standards for all orms to follow and that's why we get the jakarta


  now after this we get another error
  Exception in thread "main" org.hibernate.AnnotationException: Entity 'com.nishant.Student' has no identifier (every '@Entity' class must declare or inherit at least one '@Id' or '@EmbeddedId' property)
  	at org.hibernate.boot.model.internal.InheritanceState.determineDefaultAccessType(InheritanceState.java:289)
  	at org.hibernate.boot.model.internal.InheritanceState.getElementsToProcess(InheritanceState.java:226)
  	at org.hibernate.boot.model.internal.InheritanceState.postProcess(InheritanceState.java:162)
  	at org.hibernate.boot.model.internal.EntityBinder.handleIdentifier(EntityBinder.java:410)
  	at org.hibernate.boot.model.internal.EntityBinder.bindEntityClass(EntityBinder.java:251)
  	at org.hibernate.boot.model.internal.AnnotationBinder.bindClass(AnnotationBinder.java:404)
  	at org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.processEntityHierarchies(AnnotationMetadataSourceProcessorImpl.java:266)
  	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.processEntityHierarchies(MetadataBuildingProcess.java:281)


this is because we don't have any pk or any identifier
so we need to provide the id to the student class so we will add @Id in the student class and then this issue will be resolved


Now let's see whether the data is getting saved or not

No the data is not getting saved but why
as we know everytime when we made any changes in the db that is a transaction and we need to commit very transaction in the db
we have a commit method to commit the changes and this method is a part of transaction and for that we need to create an object of the transaction method
and transaction is an interface and we have to create it's object using the session
and session have a method beginTransaction which will return an object of transaction

Transaction tr = session.beginTransaction();
tr.commit()

this how this will work
very simple it will just start the transaction tells hibernate that here is something that is going to be changes now you begin and after the changes commit
the changes and mark it as done


but now this says the table does not exist and for that we can create the table  y just adding the line in the cfg.xml that will create the table whenever it needs and
if not then it will update the table

 <property name="hibernate.hbm2ddl.auto">update</property>


now as we are getting the data getting stored in the db now the task is how this happens????

As we know that internally hibernates uses the sql queries or jdbc to store the data but how can we make visible our queries how can we do this ?

we can do this by just including the dependency like
 <property name="hibernate.show_sql">true</property>
 <property name="hibernate.format_sql">true</property> // this will format the query in a proper way



now lets modify this and do some changes

in this save(java.lang.Object)' is deprecated since version 6.0  we have used the save method which shows us that this method is deprecated
so as we discussed earlier for matching the standard with JPA we have persist() method that we can use in place of save() method

and we also need to close the session for our sessionFactory and session

now lets clear the configuration for our app the 3 mentioned lines for the configure the connection

now we save the data but now we want to fetch the data and now we don't need to transaction becuase we are not making any change in the db we are just fetching it
we can get the dta by using the get method of session which needs two params one for the data type and the other for the primary key

 student2 = session.get(Student.class,"1");
        System.out.println(student2);



Now till this point we have read about Create, Read now lets talks about the update and the delete methods what are those?
For anything that we want to update is first fetch the object of that student and then we will call the update method but ooops!!! what did it happended ?
we don't have the update method it is deprecated and now what can we do is we can use the merge method for this and hen we can update this and as we know that we
have to update the data so we need to use the transaction for this  so how the code will look lke is .......


student.setRollNo("6");
student.setsName("Rohit");
student.setsAge(22);

SessionFactory sessionFactory = configuration.buildSessionFactory() ;
Session session = sessionFactory.openSession();

Transaction transaction = session.beginTransaction();
session.merge(student);
  transaction.commit();


this is how this will loook like and if we don't find the data using teh merge query then it will insert the data in the db

let's talk about delete

delete is depecated in session

but we can use remove method for this
student = session.get(Student.class,"6");
 session.remove(student);


this is how firstly we use the student object to find that particular student and then we delete the use using the merge function in the session


As of now we have find it out that we have not specified any table name we just used @Entity annotaion and the table where we inserted the data is just same as
out class student in just small letters
now let's check how can we rename it and provide the name as we want



package com.nishant;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Main {
    public static void main(String[] args) {
        Student student = new Student();

//        student.setRollNo("6");
//        student.setsName("Rohit");
//        student.setsAge(22);

        Student student2 = null;


        Configuration configuration = new Configuration();
        configuration.addAnnotatedClass(com.nishant.Student.class);
        configuration.configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory() ;
        Session session = sessionFactory.openSession();

        // we need this only for modificaiton in db
        Transaction transaction = session.beginTransaction();
//        session.persist(student);
//        session.merge(student);

        student = session.get(Student.class,"6");
        session.remove(student);

        transaction.commit();

       student2 = session.get(Student.class,"1");
        System.out.println(student2);

        session.close();;
        sessionFactory.close();
    }
}

this is how my class looks like till this point now let's go deep and change the main method accorduing to alien class


        <property name="hibernate.hbm2ddl.auto">update</property>

what if we do create in place of update what this will do is that first this will drop the table if exists and then it will create the new table wn fhten
inset the data in that

we can change the table name like
this
@Entity(name ="Alien_entry") // this will change the entity name and

@Table(name="Alien Table "); // this will change the table name

but as of now the table name is getting picked up from the entity name
Class == Entity === Table Name

@Column(name ="Column name ") this will chage the column name
this follows the same hierarchy as mentioned above

by using @Transient we can ask the hibernate to not to store the key in the db just we use that for our purpose for some operations

now let;s work with the complex data type

Exception in thread "main" org.hibernate.type.descriptor.java.spi.JdbcTypeRecommendationException: Could not determine recommended JdbcType for Java type 'com.nishant.Laptop'
	at org.hibernate.type.descriptor.java.spi.UnknownBasicJavaType.getRecommendedJdbcType(UnknownBasicJavaType.java:50)
	at org.hibernate.boot.model.process.internal.InferredBasicValueResolver.from(InferredBasicValueResolver.java:195)
	at org.hibernate.mapping.BasicValue.resolution(BasicValue.java:664)
	at org.hibernate.mapping.BasicValue.buildResolution(BasicValue.java:461)
	at org.hibernate.mapping.BasicValue.resolve(BasicValue.java:351)
	at org.hibernate.mapping.BasicValue.resolve(BasicValue.java:341)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.lambda$processValueResolvers$6(InFlightMetadataCollectorImpl.java:1827)


we will get this if we will pass any object of any other class as a data type to the variable because as of now it understands int string and char but now it does not
know what is laptop or some special type

how we want our alien table looks like it should looks like

aname , aid , tech | brand | model | ram
the laptop type should be embedded in the alien table how can we do it is by using the @Embeddable annotation in the laptop class



Now we are working on one ton one relation so first i need to make the class an entity and then i need to have an primary key in the table we 
created that proving the annotaion@entity and @Id and then we compile it we get the error 

Exception in thread "main" org.hibernate.type.descriptor.java.spi.JdbcTypeRecommendationException: Could not determine recommended JdbcType for Java type 'com.nishant.Laptop'
becuase we havenot add that class in the sessionFactory oncfiguration becuase now we have that as an entity and then we runn it and 
what happended again we get the error what is this this is 
the same 
ohhhhhh!!!! we 
forget to tell the alien class that this is an one to one relation fter this works fine and we are done witht the one t one relation 
 

 One to Many 

 Now we need to provide a list of laptopo rather then just one laptop we added the list of laptops and passed the data on the main class 
 so that we ca push the dat ain the db and we have onetomany relation in the tables now let's runt his will this work 
 obivooulsy now beacuse we have not perseit the objec twe addt hat there we run ti now this will rok 
 yes this worked buyt what we observed is that this created a separate tbale for us which include dht id of the lapopt and ht id ofg the 
 alien and this is how orks the one to many relation but what if i don't wnat to create the the another table what i need to do let's discuss that 


  for that we can do is that we can create the refernce pf the alien in the laptop table why os that so becuse a laptop belongs to one alien not to the other aliens so we can 
  add the name there in the tbale let's do that paret 

  now we have created the alien in the l;aptop table but now we need to tell him the which alien he has lets do that in the main section 
  after this we run thit but again we get the same error how is that so 
   Could not determine recommended JdbcType for Java type 'com.nishant.Alien'
        at org.hibernate.type.descriptor.java.spi.UnknownBasicJavaType.getRecommendedJdbcType(UnknownBasicJavaType.java:50)
        at org.hibernate.boot.model.process.internal.InferredBasicValueResolver.from(InferredBasicValueResolver.java:195)
        at org.hibernate.mapping.BasicValue.resolution(BasicValue.java:664)

        let's find it out 
        why thir eror happended 
This usually happens when we are trying to build the relation of two table but we forget to tell them which relation it is 
now we are makeing a relation between aliend and laptop from alien we told him but from we haven't let's do this 


Exception in thread "main" org.hibernate.AnnotationException: Property 'com.nishant.Laptop.alien' is not a collection and may not be a '@OneToMany', '@ManyToMany', or '@ElementCollection'
i gotthis exceptipn but why because according to our knowledge many laptops can belong to one alien so the relation should be of many to one but what i have given this is 
one to many and that is wrong always rememberabout the relation part what are you building 

yaah now it works 
now we the relation in the laptop table about the alien bu the problem is same still we have 3rd table but why is that so becuase the alien is handluing the one to many relation and the 
laptop is handling the many to one relation so they are treating them individually but how can er skip them 
let's do that this is now on my ego ...........
 
 we have tell the alien table not to map the data how can we do this is like 
     @OneToMany(mappedBy = "alien")

so this will create the tbale now 
no erorr and no 3rd table done with this 

one to many and many to one is done 
let's do this with many to many 


we have to make some changes because now 1 laptop can belong to many aliens and 1 alien can have mutiple laptops how can we do this lat's explore this 

 we have made the significant changes that we need to make and it worked first time it we hit the goal 


it runs but agin we have another table ove the db and we know how to avoid this how can we do it let's do iot by using mapped by but it does not work why is that so lets 
find it out whtehre this work only for ManytoONe ???
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "org.hibernate.mapping.ToOne.getReferencedEntityName()" because "toOne" is null

we stopeed the mapping from both of the tables but we have to map it atleast from one so we remove theone 
it works and no more tabnle we have 


NOw we are going to work on eger fetching and lazy fetching and for that we need to make some changes and we need to keep one things in mind is that 
one alien can hvae many laptops but one laptop belongs to one alien so we have to do some changes regarding that let;s do them 
 
 now after the changes we tried to find out the data in this but we don't hvae the query for this 
         Alien a5 = session.get(Alien.class, 2);

hibernate uses the cache how lets find it out ??
why is this because we are working in one session everything is happening in the same session not in the other session that's why this is happening like this 

for the query we can create a new session and then we can use the query and find the data using the query  
 
 as i uses the other session i get the query like this 
 Hibernate: 
    select
        a1_0.aid,
        a1_0.ananme,
        a1_0.tech 
    from
        Alien a1_0 
    where
        a1_0.aid=?



carefully if we notice this we get that it gives us all the data of that alien except the laptop but why is that because when we have a 
collection in an entity then it basically uses the lazy fetch by defalut it implementing the lazy fetch means it will gives the all data when we need it somewhere like if 
i print the data then it will fetch the all data that is called lazy fetching when we need it we get it 

as i print it then the query and the data look like this 


Hibernate: select a1_0.aid,a1_0.ananme,a1_0.tech from Alien a1_0 where a1_0.aid=?
Hibernate: select l1_0.Alien_aid,l1_1.lid,l1_1.brand,l1_1.model,l1_1.ram from Alien_Laptop l1_0 join Laptop l1_1 on l1_1.lid=l1_0.laptops_lid where l1_0.Alien_aid=?
Alien{ananme='RobinHood_NAme', aid='2', tech='C++', laptop=[Laptop{lid='1'brand='MackBook', model='m1', ram=12}, Laptop{lid='2'brand='MackBook', model='m3', ram=16}]}


what if i don't want the lazy fetcing we can go for eager how can we do it like this 
    @OneToMany(fetch = FetchType.EAGER)

used this in the alien and i get the data here in the witht the query 

NOw as we have sql to fetch the data from the db we have the hql to fetch the data using hibernate let's do this 
remove the necessary changes from the main file and then we do some changes in the hibernate file change the type from create to update so that the data should not be lost and then we 
run it and try to fetch the data using hql 

 // Query query = session.createQuery("from Laptop where brand like ?1 and ram
        // =?2");
        // Lisr<Laptops> list = query.getResultList();
        // query.setParameter(1,brand);
        // query.setParameter(2,ram); 

this is how the queries are wriiteen and passed in the creare query and we can pass the params also but we need to keep that in mind which param we are passing 
so we numbered them with 1 and 2 

for fetcing the only one things out of the other we can select in the query like select model and for that we have to change the data type which we want we should e
except the result in the string 


let's go with get() vs Load()

get will fire the query and give us the data but load is lke the lazy loading 